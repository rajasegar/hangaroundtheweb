<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bestpractices on hangaroundtheweb</title>
    <link>http://hangaroundtheweb.com/tags/bestpractices/</link>
    <description>Recent content in bestpractices on hangaroundtheweb</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 21 Apr 2019 22:30:14 +0000</lastBuildDate><atom:link href="http://hangaroundtheweb.com/tags/bestpractices/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>24 ways for being productive with big code base</title>
      <link>http://hangaroundtheweb.com/posts/24-ways-for-being-productive-with-big-code-base/</link>
      <pubDate>Sun, 21 Apr 2019 22:30:14 +0000</pubDate>
      
      <guid>http://hangaroundtheweb.com/posts/24-ways-for-being-productive-with-big-code-base/</guid>
      <description>In this article we will take a look at some of the guiding principles which are beneficial while working with large code base.
The whole idea of this post is to collect and come up with a checklist of significant approaches and ways to deal with large and legacy code bases.
The readers are welcome to share more tools, methods and approaches in the comments section below.
1. Onboarding Documentation Ask if there is onboarding documentation, or someone who can give you a high-level overview of the codebase.</description>
    </item>
    
  </channel>
</rss>

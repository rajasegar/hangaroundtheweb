<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on hangaroundtheweb</title>
    <link>http://hangaroundtheweb.com/tags/programming/</link>
    <description>Recent content in programming on hangaroundtheweb</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Aug 2018 23:16:48 +0000</lastBuildDate><atom:link href="http://hangaroundtheweb.com/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Five Joys of the Programming Craft</title>
      <link>http://hangaroundtheweb.com/posts/the-five-joys-of-the-programming-craft/</link>
      <pubDate>Wed, 08 Aug 2018 23:16:48 +0000</pubDate>
      
      <guid>http://hangaroundtheweb.com/posts/the-five-joys-of-the-programming-craft/</guid>
      <description>The Five Joys of the Programming Craft In this article, we are revisiting the original ideas about the pleasures of programming put forth by Fred Brooks in one of the most influential and timeless books on software project management known as The Mythical Man-Month.
Why is programming fun? What delights may its practitioner expect as his reward?
1. The Sheer joy of building things First is the sheer joy of making things.</description>
    </item>
    
    <item>
      <title>Conceptual Integrity - Revisited</title>
      <link>http://hangaroundtheweb.com/posts/conceptual-integrity-revisited/</link>
      <pubDate>Mon, 06 Aug 2018 02:04:26 +0000</pubDate>
      
      <guid>http://hangaroundtheweb.com/posts/conceptual-integrity-revisited/</guid>
      <description>Conceptual integrity is the principle that anywhere you look in your system, you can tell that the design is part of the same overall design. This includes low-level issues such as formatting and identifier naming, but also issues such as how modules and classes are designed, etc. This is vitally important, because inevitably, unanticipated issues come up that must be resolved quickly. If there is a coherent design to the system, it can be much easier to resolve these issues by determining what would be consistent with the overall design, especially if the other designers are not present.</description>
    </item>
    
    <item>
      <title>Cognitive Dissonance in Programming</title>
      <link>http://hangaroundtheweb.com/posts/cognitive-dissonance-in-programming/</link>
      <pubDate>Tue, 31 Jul 2018 22:46:04 +0000</pubDate>
      
      <guid>http://hangaroundtheweb.com/posts/cognitive-dissonance-in-programming/</guid>
      <description>Cognitive Dissonance in Programming In the field of psychology, cognitive dissonance is the mental discomfort (psychological stress) experienced by a person who simultaneously holds two or more contradictory beliefs, ideas, or values. The occurrence of cognitive dissonance is a consequence of a person performing an action that contradicts personal beliefs, ideals, and values; and also occurs when confronted with new information that contradicts said beliefs, ideals, and values. In the fable of The Fox and the Grapes, by Aesop, on failing to reach the desired bunch of grapes, the fox then decides he does not truly want the fruit because it is sour.</description>
    </item>
    
    <item>
      <title>Classical quotations and words of wisdom on managing software</title>
      <link>http://hangaroundtheweb.com/posts/classical-quotations-and-words-of-wisdom-on-managing-software/</link>
      <pubDate>Mon, 23 Jul 2018 23:45:42 +0000</pubDate>
      
      <guid>http://hangaroundtheweb.com/posts/classical-quotations-and-words-of-wisdom-on-managing-software/</guid>
      <description>Managing Software - Words of Wisdom Software project management is an art and science of planning and leading software projects. It is a sub-discipline of project management in which software projects are planned, implemented, monitored and controlled. These words of wisdom are the outcome of multi-role viewpoint on software development. There is no ranking for better practices. But what really matters is to apply these practices where they make sense and where the users can benefit the most.</description>
    </item>
    
    <item>
      <title>The Four Factors of a Good Program</title>
      <link>http://hangaroundtheweb.com/posts/the-four-factors-of-a-good-program/</link>
      <pubDate>Sun, 25 Mar 2018 04:28:13 +0000</pubDate>
      
      <guid>http://hangaroundtheweb.com/posts/the-four-factors-of-a-good-program/</guid>
      <description>The Four Factors of a Good Program If we plan to study programming as a human activity, we are going to have to develop some measures of programming performance. That is, we are going to have some idea of what we mean when we say that one programmer is better than another, or one program is better than another. Although we all have opinions on these questions, we shall find that the answers are not as simple as we might wish.</description>
    </item>
    
    <item>
      <title>Egoless Programming</title>
      <link>http://hangaroundtheweb.com/posts/egoless-programming/</link>
      <pubDate>Sun, 11 Mar 2018 01:03:31 +0000</pubDate>
      
      <guid>http://hangaroundtheweb.com/posts/egoless-programming/</guid>
      <description>Egoless Programming Egoless programming is a concept introduced by Gerald Weinberg in The Psychology Of Computer Programming. The idea is that programmers must fight the natural tendency to treat their programs as part of themselves, and therefore to reject all criticism. Rather, they should do their best to treat their designs &amp;amp; implementations as objects independent of themselves, and to view criticism dispassionately on its merits. What is to be done about the ego problem in programming?</description>
    </item>
    
  </channel>
</rss>
